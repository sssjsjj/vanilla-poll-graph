{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,IAAI;AACJ,yB","sources":["webpack://vanilla-poll-graph/./lib/Graph.js"],"sourcesContent":["/*\r\n- 생성자 함수로 작업할 것.\r\n- 하나의 문항(타이틀)을 가진다.\r\n- 선택지는 5개이다. 3개인 케이스도 가능하도록 하면 좋을 것 같다.\r\n- -2, -1, 0, 1, 2로 값을 받도록 하고 해당 값에 대한 명칭(매우아니다, 그렇다 등)은 타입에 따라 나누고 싶다.\r\n- 최대값 바탕 - 5단위로 표시선을 그려준다. 단위는 설정할 수 있도록 하면 좋겠다. 노출여부도.\r\n- 전체 평점을 백분율로 노출.\r\n\r\n받을 값들은\r\n그래프타입, 타이틀, 답변 타입, 표시선 단위,\r\n\r\n로직 순서는\r\n그래프 라벨 삽입 > 데이터 라벨 삽입 > 데이터 라벨 당 값 계산 후 삽입 > 값 평점 구하여 노출 > 제일 높은 테이터값에 해당하는 포인트 최대값 계산 > 최대값 기반으로 포인트 및 라인 삽입 > \r\n*/\r\nclass Graph {\r\n  constructor(id, { label = '', data = [], points = 5 }) {\r\n    this.label = label\r\n    this.data = data\r\n    this.answerMap = new Map([\r\n      ['98', '매우 아니다'],\r\n      ['99', '아니다'],\r\n      ['100', '보통이다'],\r\n      ['101', '그렇다'],\r\n      ['102', '매우 그렇다']\r\n    ])\r\n    this.points = points\r\n    \r\n    this.init(id)\r\n  }\r\n\r\n  init(id) {\r\n    this.el = document.getElementById(id)\r\n    this.eachAnswerLengthMap = this.eachAnswerLengthMap()\r\n    this.maxData = this.maxData()\r\n    this.maxPoint = this.maxPoint()\r\n    this.dataAverage = this.dataAverage()\r\n    this.drawHTML()\r\n\r\n    console.log(this)\r\n  }\r\n  newEl(tagName, className) {\r\n    const el = document.createElement(tagName)\r\n    el.classList.add(className)\r\n    return el\r\n  }\r\n  drawHTML() {\r\n    const elGraphArea = this.newEl('div', 'area-graph')\r\n    // append\r\n    elGraphArea.appendChild(this.elGraph())\r\n    elGraphArea.appendChild(this.elPoints())\r\n    elGraphArea.appendChild(this.elAverage())       \r\n    this.el.appendChild(elGraphArea)\r\n  }\r\n\r\n  elGraph() {\r\n    const elGraph = this.newEl('dl', 'graph')\r\n    const elMainLabel = this.elMainLabel()\r\n    const elAnswerWrap = this.elAnswerWrap()\r\n    // append\r\n    elGraph.appendChild(elMainLabel)\r\n    elGraph.appendChild(elAnswerWrap)\r\n    // return\r\n    return elGraph\r\n  }\r\n\r\n  elMainLabel() {\r\n    const elMainLabel = this.newEl('dt', 'label-main')\r\n    const strMainLabel = this.el.dataset.graph\r\n    elMainLabel.innerText = strMainLabel\r\n    // return\r\n    return elMainLabel\r\n  }\r\n\r\n  elAnswerWrap() {    \r\n    const elAnswerWrap = this.newEl('div', 'wrap-answer')\r\n    for(const answer of this.answerMap.keys()) {\r\n      const elAnswer = this.newEl('dd', 'answer')\r\n      elAnswer.appendChild(this.elAnswerLabel(answer))\r\n      elAnswer.appendChild(this.elDataArea(answer))\r\n      elAnswerWrap.appendChild(elAnswer)\r\n    }\r\n    return elAnswerWrap\r\n  }\r\n\r\n  elDataArea(answer) {\r\n    const elDataArea = this.newEl('span', 'area-data')\r\n    const elDataValue = this.newEl('span', 'value-data')\r\n    elDataValue.innerText = this.eachAnswerLengthMap.get(answer)\r\n    elDataArea.appendChild(elDataValue)\r\n    return elDataArea\r\n  }\r\n\r\n  elAnswerLabel(answer) {\r\n    const elAnswerLabel = this.newEl('span', 'label-answer')\r\n    elAnswerLabel.innerText = this.answerMap.get(answer)\r\n    return elAnswerLabel\r\n  }\r\n\r\n  elPoints() {\r\n    const elPoints = this.newEl('ul', 'points')\r\n    const pointsNum = this.maxPoint / this.points\r\n\r\n    for(let i = 0; i <= pointsNum; i++) {\r\n      const elPoint = this.newEl('li', 'point')\r\n      elPoint.innerText = this.points * i\r\n      elPoints.appendChild(elPoint)\r\n    }\r\n    return elPoints\r\n  }\r\n\r\n  elAverage() {\r\n    const elPoints = this.newEl('ul', 'points')\r\n    return elPoints\r\n  }\r\n\r\n\r\n  eachAnswerLengthMap() {\r\n    const result = new Map()\r\n    for(const data of this.data) {\r\n      const key = `${100 + data}`\r\n      result.get(key) === undefined\r\n        ? result.set(key, 0)\r\n        : result.set(key, result.get(key) + 1)      \r\n    }\r\n    return result\r\n  }\r\n\r\n  maxData() {\r\n    const maxData = Math.max(...this.eachAnswerLengthMap.values())\r\n    return maxData\r\n  }\r\n  \r\n  maxPoint() {\r\n    const rest = this.maxData % this.points\r\n    const gap = rest === 0 ? 0 : this.points - rest\r\n    const maxPoint = this.maxData + gap\r\n    return maxPoint\r\n  }\r\n  \r\n  dataAverage() {\r\n    // -2 = 0\r\n    // -1 = 25\r\n    // 0 = 50\r\n    // 1 = 75\r\n    // 2 = 100\r\n    const dataLength = this.data.length\r\n    const caseSize = this.answerMap.size\r\n    const divide = caseSize - 1\r\n    const eachPercent = 100 / divide\r\n    const cases = []\r\n    for(let i = 0; i < caseSize; i++) {\r\n      eachPercent\r\n    }\r\n    \r\n    // return dataAverage\r\n  }\r\n}\r\n\r\nconst graph1 = new Graph('graph1', {\r\n  data: [-1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,-1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,-1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,-1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2]\r\n  // answers: {},\r\n  // points: 5,\r\n})\r\n\r\n// const graph1 = new Graph('graph1', {\r\n//   label: ['오늘 먹은 메뉴는 맛있었나요?', '직원들의 서비스는 만족스러우셨나요?'],\r\n//   data: [\r\n//     [-1, -1, -1, -2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],\r\n//     [-1, -1, -1, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2]\r\n//   ],\r\n//   // answers: {},\r\n//   // points: 5,\r\n// })\r\n// module.exports = graph"],"names":[],"sourceRoot":""}